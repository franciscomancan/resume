/***	class Huffman: all code here was borrowed and adapted from*	the Huffman stream encoding algorithm.  See the Berkeley*	decoder for further documentation.**/public class Huffmann{    public static final int DCT_ESCAPE = 63;    public static final int EOB = 62;	public static final int macro_block_inc[][] = {		{45, 1, 0}, {-1, -1, 1}, {-1, -1, 2}, {-1, -1, 3}, {-1, -1, 4}, {-1, -1, 5},		{-1, -1, 6}, {-1, -1, 7}, {-1, -1, 8}, {-1, -1, 9}, {-1, -1, 10}, {-1, -1, 11},		{-1, -1, 12}, {-1, -1, 13}, {-1, -1, 14}, {-1, -1, 15}, {-1, -1, 16}, {-1, -1, 17},		{-1, -1, 18}, {-1, -1, 19}, {-1, -1, 20}, {-1, -1, 21}, {-1, -1, 22}, {-1, -1, 23},		{-1, -1, 24}, {-1, -1, 25}, {-1, -1, 26}, {-1, -1, 27}, {-1, -1, 28}, {-1, -1, 29},		{-1, -1, 30}, {-1, -1, 31}, {-1, -1, 32}, {-1, -1, 33}, {-1, -1, -1}, {-1, -1, -2},		{23, 22, 0}, {47, 36, 0}, {37, 75, 0}, {38, 73, 0}, {39, 71, 0}, {52, 40, 0},		{41, 67, 0}, {42, 65, 0}, {43, 64, 0}, {44, 63, 0}, {45, -1, 0}, {25, 24, 0},		{27, 26, 0}, {53, 48, 0}, {55, 49, 0}, {-1, 50, 0}, {60, 51, 0}, {29, 28, 0},		{31, 30, 0}, {56, 54, 0}, {33, 32, 0}, {-1, 34, 0}, {-1, 57, 0}, {62, 58, 0},		{-1, 59, 0}, {35, -1, 0}, {61, -1, 0}, {3, 2, 0}, {5, 4, 0}, {7, 6, 0},		{9, 8, 0}, {69, 66, 0}, {11, 10, 0}, {70, 68, 0}, {13, 12, 0}, {15, 14, 0},		{17, 16, 0}, {74, 72, 0}, {19, 18, 0}, {21, 20, 0}};    public static final int dct_size_luminance[][] = {		{18, 15, 0}, {-1, -1, 0}, {-1, -1, 1}, {-1, -1, 2}, {-1, -1, 3}, {-1, -1, 4},		{-1, -1, 5}, {-1, -1, 6}, {-1, -1, 7}, {-1, -1, 8}, {9, -1, 0}, {8, 10, 0},		{7, 11, 0}, {6, 12, 0}, {5, 13, 0}, {17, 14, 0}, {18, 15, 0}, {1, 4, 0},		{2, 3, 0}};    public static final int dct_size_crominance[][] = {		{18, 16, 0}, {-1, -1, 0}, {-1, -1, 1}, {-1, -1, 2}, {-1, -1, 3}, {-1, -1, 4},		{-1, -1, 5}, {-1, -1, 6}, {-1, -1, 7}, {-1, -1, 8}, {9, -1, 0}, {8, 10, 0},		{7, 11, 0}, {6, 12, 0}, {5, 13, 0}, {4, 14, 0}, {3, 15, 0}, {18, 16, 0},		{1, 2, 0}};    private static final int dct_coeff0[] = {		128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 99, 130, 115, 116, -1,        118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 101, 102, 131, 103, 136,        134, 105, 107, 110, 140, 112, 1, 143, 4, 155, 144, 8, 9, 149, 12, 13, 152, 14,        18, 158, 157, 25, 156, 21, 24, 26, 166, 161, 27, 163, 31, 33, 40, 167, 172, 175,        35, 171, 41, 176, 174, 37, 46, 39, 178, 42, 49, 50, 186, 183, 189, 52, 54, 190,        192, 56, 58, 193, 60, 62, 196, 64, 67, 201, 203, 207, 69, 71, 204, 73, 75, 208,        210, 77, 79, 211, 81, 82, 212, 213, 218, 84, 219, 221, 86, 88, 222, 90, 92, 225,        94, 96};    private static final int dct_coeff1[] = {		141, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, 114, 132, 135, 117,		215, 200, 185, 170, 162, 17, 151, 148, 145, 142, 141, 100, 108, 137, 113, 133,		139, 104, 106, 109, 138, 111, 2, 3, 5, 6, 146, 7, 10, 147, 11, 15, 150, 16, 22,		153, 154, 19, 159, 20, 23, 28, 160, 164, 32, 165, 29, 30, 34, 180, 168, 169, 47,		177, 36, 173, 179, 44, 38, 43, 181, 45, 48, 65, 182, 195, 184, 51, 53, 187, 188,		55, 57, 191, 59, 61, 194, 63, 66, 197, 198, 199, 68, 70, 202, 72, 74, 205, 206,		76, 78, 209, 80, 97, 226, 224, 214, 83, 216, 217, 85, 87, 220, 89, 91, 223, 93, 95};    private static int dct_coeff_val[] = {		0x0, 0x3e3e, 0x100, 0x101, 0x200, 0x102, 0x300, 0x103, 0x104, 0x201, 0x105, 0x106,		0x107, 0x400, 0x202, 0x108, 0x109, 0x3f3f, 0x500, 0x600, 0x301, 0x203, 0x10a, 0x10b,		0x10c, 0x10d, 0x700, 0x401, 0x302, 0x204, 0x205, 0x10e, 0x10f, 0x110, 0x800, 0x900,		0xa00, 0xb00, 0x501, 0x402, 0x303, 0x304, 0x206, 0x207, 0x208, 0x111, 0x112, 0x113,		0x114, 0x115, 0xc00, 0xd00, 0xe00, 0xf00, 0x601, 0x701, 0x502, 0x403, 0x305, 0x209,		0x20a, 0x116, 0x117, 0x118, 0x119, 0x11a, 0x1000, 0x1100, 0x1200, 0x1300, 0x1400,		0x1500, 0x1600, 0x1700, 0x1800, 0x1900, 0x1a00, 0x1b00, 0x1c00, 0x1d00, 0x1e00, 0x1f00,		0x2000, 0x2100, 0x2200, 0x2300, 0x2400, 0x2500, 0x2600, 0x2700, 0x2800, 0x801, 0x901,		0xa01, 0xb01, 0xc01, 0xd01, 0xe01, 0xf01, 0x1001, 0x1101, 0x1201, 0x306, 0x20b, 0x20c,		0x20d, 0x20e, 0x20f, 0x210, 0x11b, 0x11c, 0x11d, 0x11e, 0x11f, 0x0, 0x0, 0x0, 0x0, 0x0,		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,		0x0, 0x0, 0x0, 0x0, 0x0, 0x0};    public static int[] decode(int currentMaxLen, int tab[][],    						   BitStreamProcessor myStream,Macroblock m)	{	    int idx = 0, idx1 = 0;	    int inputMaxLen = currentMaxLen;	    ++currentMaxLen;	    int mask = (1 << currentMaxLen);        int bits = (int) myStream.readBits(currentMaxLen);	    while (idx != -1)	    {            idx1 = idx;            mask >>>= 1;    // next bit            if ((bits & mask) != 0)                idx = tab[idx][1];            else                idx = tab[idx][0];            --currentMaxLen;   // count the length        }		int usedBits = inputMaxLen - currentMaxLen;        m.shiftInBits(myStream.getBits(usedBits), usedBits);        return(tab[idx1]);	}    public static int decodeCoeff(BitStreamProcessor myStream, Macroblock m)    {		int idx = 0, idx1 = 0;		int currentMaxLen = 28;        int bits = (int) myStream.readBits(29);		while (idx != -1)        {			idx1 = idx;            if ((bits & (1 << currentMaxLen)) != 0)                idx = dct_coeff1[idx];            else                idx = dct_coeff0[idx];            --currentMaxLen;        }		int usedBits = (27 - currentMaxLen);        m.shiftInBits(myStream.getBits(usedBits), usedBits);        return(dct_coeff_val[idx1]);	}}